import java.net.*;
import java.io.*;
import java.util.Date;
import java.sql.Timestamp;


import javax.crypto.Mac;
import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;

public class BinanceTest {
    private String apiKey;
    private String apiSecret;
    private String base;
    private String endPoint;
    private String secret;
    private String signature;
    private String queryString;
    private long timeStampMillis;

    public Binance(String apiKey, String apiSecret){
        this.apiKey = apiKey;
        this.apiSecret = apiSecret;
    }
    public void testConnection(String base) throws Exception{
        Timestamp timestamp = new Timestamp(System.currentTimeMillis());
        timeStampMillis = timestamp.getTime();

/*
        String key = apiSecret ;
        String message = "timestamp="+timeStampMillis;
        Mac hasher = Mac.getInstance("HmacSHA256");
        hasher.init(new SecretKeySpec(key.getBytes(), "HmacSHA256"));

        byte[] hash = hasher.doFinal(message.getBytes());

        String hashResult = hash.toString();
*/

        String message = "timestamp="+timeStampMillis;

        SecretKeySpec key = new SecretKeySpec((apiSecret).getBytes("UTF-8"), "HmacSHA256" );
        Mac mac = Mac.getInstance("HmacSHA256");
        mac.init(key);
        byte[] bytes = mac.doFinal(message.getBytes("ASCII"));
        StringBuffer hash = new StringBuffer();
        for (int i = 0; i < bytes.length; i++) {
            String hex = Integer.toHexString(0xFF & bytes[i]);
            if (hex.length() == 1) {
                hash.append('0');
            }
            hash.append(hex);
        }
        //System.out.println(hash.toString());
        signature = hash.toString();
        // to lowercase hexits
        //DatatypeConverter.printHexBinary(hash);

        // to base64
        //DatatypeConverter.printBase64Binary(hash);
        System.out.println(this.apiKey);
        endPoint = base;
        endPoint += "api/v3/account?";
        //endPoint +=
        //endPoint += "recvWindow=5000";
        endPoint += "timestamp="+timeStampMillis;
        endPoint += "&signature="+signature;
        System.out.println(endPoint);
        queryString = base+endPoint+apiSecret+signature;
        URL url = new URL(endPoint);
        HttpURLConnection con = (HttpURLConnection) url.openConnection();
        con.setRequestMethod("GET");
        con.setRequestProperty("Content-type", "application/x-www-form-urlencoded");
        con.setRequestProperty("X-MBX-APIKEY", this.apiKey);

        BufferedReader br = new BufferedReader(new InputStreamReader(con.getInputStream()));

        String output;
        while ((output = br.readLine()) != null){
            System.out.println(output);
        }

        con.disconnect();
    }

}
/*
 * url: base+endpoint+timestamp+signature
 * headers: X-MBX-APIKEY, content-type

    String apiKey = "mJFfrczRps9kKbi8KlQiDqmvIyGZv8FP2d7fXqgLvYy4E5QSbDbW7qcrVEtHNhaz";
    String apiSecret = "5i0dJr7mnTicaz6589TCWInT6GbiwJLVR4OcEeDzrWFBXBtrtfnyREEZHqkLkjqD";
*/